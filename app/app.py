import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
import json
from config import API_TOKEN


def load_games_data(filename="psn_deals_full.json"):
    with open(filename, "r", encoding="utf-8") as file:
        return json.load(file)


games_data = load_games_data()


def get_discount_value(game):
    discount = game.get("discount_percent", "N/A")
    if discount == "N/A":
        return 0
    try:
        return int(discount.strip('%').strip('-'))
    except ValueError:
        return 0


def filter_games(discount_threshold):
    filtered_games = []

    for game in games_data:
        if discount_threshold == 0:
            filtered_games.append(game)
            continue

        discount = game.get("discount_percent", "N/A")
        if discount == "N/A":
            continue

        try:
            discount_value = int(discount.strip('%').strip('-'))
            if discount_value >= discount_threshold:
                filtered_games.append(game)
        except ValueError:
            print(
                f"Skipping game with invalid discount_percent: {game.get('name', 'N/A')}, Value: {discount}")
            continue

    if discount_threshold > 0:
        filtered_games.sort(
            key=get_discount_value,
            reverse=True
        )

    return filtered_games


def create_game_keyboard(game):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{game['url']}")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤ PSN Store", url=f"https://store.playstation.com{game['url']}")]
    ])
    return keyboard


async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å PSN —Å–∫–∏–¥–∫–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π /discounts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–∏–¥–æ–∫.")


async def discounts_handler(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="50% –∏ –≤—ã—à–µ", callback_data="filter_50_0")],
            [InlineKeyboardButton(text="75% –∏ –≤—ã—à–µ", callback_data="filter_75_0")],
            [InlineKeyboardButton(text="–í—Å–µ —Å–∫–∏–¥–∫–∏", callback_data="filter_0_0")],
            [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∏–≥—Ä—ã", callback_data="random_games")]
        ])
    )


async def filter_callback(callback: types.CallbackQuery):
    data_parts = callback.data.split("_")
    threshold = int(data_parts[1])
    page = int(data_parts[2])
    filtered_games = filter_games(threshold)
    items_per_page = 10
    start_index = page * items_per_page
    end_index = start_index + items_per_page

    if not filtered_games:
        await callback.message.answer(f"–ù–µ—Ç –∏–≥—Ä —Å —É—Ä–æ–≤–Ω–µ–º —Å–∫–∏–¥–∫–∏ {threshold}% –∏ –≤—ã—à–µ.")
        return

    for game in filtered_games[start_index:end_index]:
        if game.get("discount_percent", "N/A") == "N/A":
            text = (
                f"üéÆ <b>{game['name']}</b>\n"
                f"üí∞ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {game['base_price']}"
            )
        else:
            text = (
                f"üéÆ <b>{game['name']}</b>\n"
                f"üí∞ –°–∫–∏–¥–∫–∞: {game['discount_percent']}\n"
                f"–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {game['discount_price']}\n"
                f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {game['base_price']}"
            )
        await callback.message.answer(
            text,
            reply_markup=create_game_keyboard(game),
            parse_mode="HTML"
        )

    total_pages = (len(filtered_games) + items_per_page - 1) // items_per_page
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    if page > 0:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="< –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"filter_{threshold}_{page - 1}")])
    if page < total_pages - 1:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è >", callback_data=f"filter_{threshold}_{page + 1}")])

    if keyboard.inline_keyboard:
        await callback.message.answer("–°—Ç—Ä–∞–Ω–∏—Ü—ã:", reply_markup=keyboard)


async def details_callback(callback: types.CallbackQuery):
    game_url = callback.data.split("_", 1)[1]
    game = next((g for g in games_data if g["url"] == game_url), None)

    if not game:
        await callback.message.answer("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    text = (
        f"üéÆ <b>{game['name']}</b>\n"
        f"üí∞ –°–∫–∏–¥–∫–∞: {game['discount_percent']}\n"
        f"–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {game['discount_price']}\n"
        f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {game['base_price']}\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {game['offer_end_date']}\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ PSN Store](https://store.playstation.com{game['url']})"
    )
    await callback.message.answer(text, parse_mode="HTML")


async def random_games_callback(callback: types.CallbackQuery):
    games_with_discounts = [game for game in games_data if game.get("discount_percent", "N/A") != "N/A"]

    if not games_with_discounts:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–∞–º–∏.")
        return

    num_games = min(10, len(games_with_discounts))
    random_selection = random.sample(games_with_discounts, num_games)

    await callback.message.answer("üé≤ –í–æ—Ç —Å–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–∞–º–∏:")

    for game in random_selection:
        text = (
            f"üéÆ <b>{game['name']}</b>\n"
            f"üí∞ –°–∫–∏–¥–∫–∞: {game['discount_percent']}\n"
            f"–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {game['discount_price']}\n"
            f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {game['base_price']}"
        )
        await callback.message.answer(
            text,
            reply_markup=create_game_keyboard(game),
            parse_mode="HTML"
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üé≤ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–≥—Ä—ã", callback_data="random_games")
    ]])
    await callback.message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–≥—Ä—ã?", reply_markup=keyboard)


async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    dp.message.register(start_handler, Command(commands=["start"]))
    dp.message.register(discounts_handler, Command(commands=["discounts"]))
    dp.callback_query.register(filter_callback, lambda cb: cb.data.startswith("filter_"))
    dp.callback_query.register(details_callback, lambda cb: cb.data.startswith("details_"))
    dp.callback_query.register(random_games_callback, lambda cb: cb.data == "random_games")

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="discounts", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–∏–¥–∫–∏")
    ])

    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())